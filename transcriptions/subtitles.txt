hey and welcome to another data

structures lesson and today we are going

to be going over

hash maps so let's get started

all right so the first thing you want to

know is what are we talking about when

we

talk about hash maps so first off what

is a map

well map is just an abstract data type

which basically means it's just an

interface

that allows for multiple implementations

okay and hashmap is one of those

implementations

of a map now a map by itself

just uses key value pairs to store data

in an associative array okay so in the

back

um in the background of it it's just an

array all right

and each of those indexes in the array

or what we call a bucket

and a bucket can hold a collection of

key value pairs each index is a

collection of key value pairs

okay so then what do what does the hash

mean

in hash map well hash is

the hash in hashmap stands for hashing

and that's just a way to map

keys to the indexes in the map

using what's called a hashing function

which we'll get into

okay all right so hashing

uh now in a map we so

because it's an array in the background

that means it's a finite size right

so it goes from zero to n minus one

where n is the size of the array so if

we have an array of four

then the indexes would be zero one two

three okay

and one thing to note about hashmap is

the keys don't have to be integer values

all right there are um the hash function

takes care of that if it's not an

integer and converts it to

an integer okay so just keep that in

mind it doesn't have to be an integer

one other important thing when talking

about hashmaps is

collisions all right so we want to

minimize collisions

so what is a collision if we have two

different keys

that go through the hash function which

we'll talk about

and returns an integer will that integer

becomes the index

in the associative array well if two

different keys come out with the same

index

that means we're trying to put them into

the same bucket in the array that's

called a collision

okay and we'll get into that all right

so there are two

important functions when we're talking

about um

about the hash function it are two

components when we're talking about hash

function the first one is the hash

code and the second one is the

compression function

all right so let's look at an example

now

so say we have um a an array of size six

so indexes zero through five so this is

our hash map

okay this is the starting array size for

our hashmap

now let's say we want to insert so well

the correct

method is put that's typically how

specifically the function call is called

put

so you can put a key value pair where

the key is 5 and the value

value is a so what hash map does it puts

it into this hash function

which is composed of two components like

we just talked about

so the first one is the hash code so

hash code takes in one parameter and

that's the key so in this case it's a

five

all right i'm just using integer values

but again it doesn't have to be an

integer value

and so it takes in the key

whatever that key is it turns it into an

integer

and now that stores say the variable i

is equal to some integer that that hash

code produced

then

then what happens is that integer

doesn't have to be

within the range of the array size yet

it could be negative

or it could be bigger than the array

size so right here the size is six

uh if the number if the index that the

integer that just produces seven

that's bigger than the array size so we

so it won't be able to be inserted into

one of those indexes because it's

larger so you get like an out of bounds

exception okay

um so that's where the compression

function comes in

we take the output integer from the hash

code so the integer the variable i

we insert that into the compression

function

and all that does is it up it now

converts

makes sure that that integer value is in

the range

of the array so here would be 0 and 5

okay so it's going to be in the range of

0

and 5. all right um

so let's take uh so now let's look at

what can happen

if uh we have a collision okay which is

whenever we try to have the same

or two different keys into the same

index all right

so here we already know that we have

that we tried to insert

um the key value pair 5a

and we tried to put it through the hash

function and it came out

with the value of one as the integer so

that one

means that we inserted that into the

corresponding index in the array

which is index one okay so that's where

it's stored right here

now let's say we have another key value

pair we want to insert

in this case um it's to

the key value pair to b and it just so

happens this is

i don't know if this is correct or not

this is just an example all right

to show you what how to deal with the

collision

so let's say we insert the keyboard pair

to b

and the output after going through the

hash code and the compression function

is one as the integer okay so that means

that we now need to put

this key value pair into the same index

that's already occupied

by 5 the key value pair 5a

this is a collision because something

already exists there and we're trying to

put something else there

now there are different ways to handle

this

because you want to think about worst

case scenarios right if all key value

players go into the same bucket and you

have to search for it

you know there's another data structure

behind there's a lot of time like i'll

talk about one now

like singly linked list all right so the

worst case scenario is you have to

traverse all the way to the end of the

singly link list just to retrieve

one value okay so

and then we have all this extra space

that's not even occupied

so a topic of discussion

that could be its own video is how to

deal with collisions

now there are there are a couple ways

all right so again we have the same key

value pairs we just used all right

the first one or there's several ways

but i'm going to talk about two of them

so the first one

is called separate chaining now what

this means

is that like we just said we have a

singly linked list for each

bucket okay so now this means that we

can have multiple

key value pairs for each bucket

and what this there's a couple things

that this allows us to do first off is

we don't have to worry about the sazi

array

because we never have to increase it

right we never have to worry about it

because if if it happened that this was

filled up

and these that weren't didn't allow we

didn't allow

key value pairs to collide in the same

bucket then you'd have to increase the

array size

so here we don't have to worry about

that because we have a single

list for each bucket in this array we

keep the same size so this will always

be size of six

and anytime there's a collision we just

add it on to the end of the singly link

list

and that's it okay that's all we do this

is one of the easier ones to implement

and easier to understand okay

so that's another one we're gonna talk

about is called linear probing

all right this is when um

each bucket only holds a single key

value pair

all right so it this doesn't even allow

collisions all right i mean

whenever we believe there's going to be

a collision it handles it right away and

doesn't allow

two key value pairs to occupy the same

bucket

so how does that work okay so let's take

a look

for an example let's say we have index

one two and four filled up

with values all right and we wanna

insert

um two b okay that's the key value pair

we wanna insert into the hash map

now what happens here is let's say

let's uh oops let me

go back one sorry about that uh

let's say we have 2b and we want to

insert it

into the hashmap and it outputs the

index

an integer of one which corresponds to

the index in the associative array

okay well that's occupied by the value a

so it can't go there all right so what's

going to do is going to say okay what's

the next

indexed well the next index is two well

that's also

occupied okay so move on to the next one

what's the next one

that's index three and that's not

occupied

so it just found an empty index and we

can insert

um the value b into this hash map

okay all right

so that's that's the basics of how

hashmap works okay so again

we whenever you want to insert anything

to the hash map

the all this does it goes through the

hash function which is two components

it is the hash code which converts

whatever

an arbitrary key into an integer value

that could be negative or could be

larger than the initial array

or the array for the hashmap so then we

have to do the compression function

which means we put it in

we make sure it's between zero and the

size of the array

and then there are ways to handle

collisions when we have two

different key value pairs going into

the same bucket in the hash map all

right and

we want to try and eliminate collisions

um to make it easier to look to search

or

remove or other operations that are

performed on a hashmap

okay all right if you guys have any

questions leave them in the comments

below

and i will do my best to answer them and

help you understand

even further okay all right thank you